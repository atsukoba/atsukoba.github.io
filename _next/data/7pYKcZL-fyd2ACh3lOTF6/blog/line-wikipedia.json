{"pageProps":{"content":"\n`flask`, `line-bot-sdk` と `wikipedia`で作って，`heroku`にデプロイします。\n\n<a href=\"http://nav.cx/9xRAMW8\" >ぜひ使って下さい。</a><a href=\"http://nav.cx/9xRAMW8\" style=\"width: 120px;height: 35px;display: inline-block;border-radius: 10px;background-image: url(https://scdn.line-apps.com/n/line_add_friends/btn/ja.png);background-size: cover;\">\n</a>\n\n\n## 完成図\n\n![screenshot](https://repository-images.githubusercontent.com/184452650/ee9d3b80-6cab-11e9-9261-01e61f18fa3c)\n\nレポジトリは[こちら](https://github.com/atsukoba/Wikipedia-LINEbot)\n\n---\n\n## 準備\n\n`pip install -r requirements.txt`させたいので，上記３つを requirements.txt へ記述し，heroku の設定と LINE@の設定を終わらせておく (アクセストークンとチャンネルシークレットあたりを入手しておく)。`runtime.txt`と`procfile`を置く。基本[Heroku で LINE BOT(python)を動かしてみた](https://qiita.com/akabei/items/38f974716f194afea4a5)を真似た。\n\n---\n\n## Wikipedia について\n\nみんなだいすき Wikipedia。\n\n```bash\npip instal wikipedia\n```\n\nで入るライブラリである[Wikipedia](https://pypi.org/project/wikipedia/)は非常に便利で，Python 用の[Media Wiki API](https://ja.wikipedia.org/w/api.php)のラッパーだと解釈している。`requests`で API 叩いて，`BeautifulSoup4`か何かでマークアップをバラして，返してくれるものだったはず。\n\n```python\nimport wikipedia\n\nwikipedia.set_lang(\"ja\")\n```\n\nで日本語 Wikipedia に設定した後，\n\n```python\nwikipedia.search(\"文字列\")\n```\n\nをすることで各`ページ名`のリストが返り，書く Wikipedia のページはその名前(タイトル)が ID となっており，\n\n```python\nwikipedia.page(\"ページ名\")\n```\n\nで`wikipedia.WikipediaPage`オブジェクトを取得できる。この page オブジェクトが`categories`, `links`, `content`, `summary`などの attributes をもっており，これらは基本的に URL か文字列かのリストである。\n\n```python\n>>> help(wikipedia.WikipediaPage)\n>>>\n\"\"\"\ncategories\n    List of categories of a page.\ncontent\n    Plain text content of the page, excluding images, tables, and other data.\ncoordinates\n    Tuple of Decimals in the form of (lat, lon) or None\nimages\n    List of URLs of images on the page.\nlinks\n    List of titles of Wikipedia page links on a page.\n    Only includes articles from namespace 0, meaning no Category, User talk, or other meta-Wikipedia pages.\nparent_id\n    Revision ID of the parent version of the current revision of this\n    page. See ``revision_id`` for more information.\nreferences\n    List of URLs of external links on a page.\n    May include external links within page that aren't technically cited anywhere.\nrevision_id\n    Revision ID of the page.\n    The revision ID is a number that uniquely identifies the current\n\"\"\"\n```\n\n今回つくる LINE Bot では，検索単語に対して取得した候補の中から 1 ページ選び，そのページの summary (タイトル直後の概要・OGP とかに表示される?)とページへのリンクを LINE トークルームにかえしてあげよう，というものを作ることにした。\n\n---\n\n## ファイルとか\n\n```\n.\n├── Procfile\n├── README.md\n├── __pycache__\n│   ├── app.cpython-36.pyc\n│   └── parser.cpython-36.pyc\n├── app.py\n├── assets\n│   └── img\n│       └── linebot-icon.png\n├── messenger.py\n├── parser.py\n├── requirements.txt\n├── runtime.txt\n└── test.py\n```\n\n---\n\n## `app.py`\n\n次に，`flask`ベースでアプリケーション部分をササっと書きますが，これもほぼコピペ。面倒な部分を`linebot`が隠してくれていて，非常に便利。\n\n```python\nfrom flask import Flask, request, abort\n\nfrom linebot import (\n    LineBotApi, WebhookHandler\n)\nfrom linebot.exceptions import (\n    InvalidSignatureError\n)\nfrom linebot.models import (\n    MessageEvent, TextMessage, TextSendMessage,\n)\n\nimport parser\nimport os\n\napp = Flask(__name__)\n\nYOUR_CHANNEL_ACCESS_TOKEN = os.environ.get(\"YOUR_CHANNEL_ACCESS_TOKEN\")\nYOUR_CHANNEL_SECRET = os.environ.get(\"YOUR_CHANNEL_SECRET\")\n\nline_bot_api = LineBotApi(YOUR_CHANNEL_ACCESS_TOKEN)\nhandler = WebhookHandler(YOUR_CHANNEL_SECRET)\n\n\n@app.route(\"/callback\", methods=['POST'])\ndef callback():\n    # get X-Line-Signature header value\n    signature = request.headers['X-Line-Signature']\n\n    # get request body as text\n    body = request.get_data(as_text=True)\n    app.logger.info(\"Request body: \" + body)\n\n    # handle webhook body\n    try:\n        handler.handle(body, signature)\n    except InvalidSignatureError:\n        print(\"Invalid signature. Please check your channel access token/channel secret.\")\n        abort(400)\n\n    return 'OK'\n\n\n@handler.add(MessageEvent, message=TextMessage)\ndef handle_message(event):\n    line_bot_api.reply_message(\n        event.reply_token,\n        TextSendMessage(text=parser.answer(event.message.text)))\n\n\nif __name__ == \"__main__\":\n    port = int(os.getenv(\"PORT\", 5000))\n    app.run(host=\"0.0.0.0\", port=port)\n```\n\nline-bot-sdk-python の公式リポジトリに，`app.py`として flask でのサンプルが公開されている。\n[[sample] app.py](https://github.com/line/line-bot-sdk-python/blob/master/examples/flask-echo/app.py)\n\nまた，今回はそもそも README にガッツリ載っていたものを使った。[sample code on GitHub](https://github.com/line/line-bot-sdk-python/blob/master/README.rst)\n\n---\n\n### `parser.py`\n\nparser はモジュールの変数として言語設定を持っている。設計として微妙ですかね？モジュール(グローバル)変数は。  \nなんか使い方間違えたりとか，ヘルプ出したい時のための`usage()`は未実装。  \n意外と`WikipediaPage.summary`の文字数が長く，Messaging API の上限を叩いてしまったときのために，1500 文字以上は切っている。\n\n```python\nimport wikipedia\n\n\n# init language setting\nlang = \"ja\"\nwikipedia.set_lang(lang)\n\ndef init() -> None:\n    global lang\n    wikipedia.set_lang(lang)\n\n\ndef tokenize(text: str) -> list:\n    \"\"\"Tokenize input Sentence to list of word\"\"\"\n    splited = text.split()\n    if len(splited) == 1:\n        return splited\n    elif len(splited) == 2:\n        if splited[0] in wikipedia.languages.fn().keys():\n            change_lang(splited[0])\n        return splited[1]\n    else:\n        usage()\n\ndef search(text: str, rank=0) -> \"wikipedia.wikipedia.WikipediaPage\":\n    \"\"\"Search Wikipedia page by Word\n    arg\n    ---\n    rank : int : Return the contents of the search result of the set rank.\n    \"\"\"\n    try:\n        page = wikipedia.page(wikipedia.search(text)[rank])\n    except wikipedia.exceptions.DisambiguationError:\n        page = wikipedia.page(wikipedia.search(text)[rank+1])\n    return page\n\n\ndef encode(page: \"wikipedia.wikipedia.WikipediaPage\", threshold=1500) -> str:\n    \"\"\"Transform data into the text for LINE message\n    \"\"\"\n    summary = page.summary\n    if len(summary) > threshold:\n        summary = summary[:threshold] + \"...\"\n\n    return f\"Result: {page.title}\\n\\n{summary}\\n\\n{page.url}\"\n\n\ndef answer(text: str) -> str:\n    init()\n    word = tokenize(text)\n    page = search(word)\n    return encode(page)\n\n\ndef change_lang(language: str) -> None:\n    wikipedia.set_lang(language)\n    return\n\ndef usage():\n    pass\n\nif __name__ == \"__main__\":\n    import argparse\n\n    parser = argparse.ArgumentParser()\n    parser.parse_args()\n```\n\n一応ちゃんと**PEP8**スタイルだし，type hints も docstring 書いている。クセにしとおきたい。\n\n---\n\n### デプロイ等\n\n```bash\n$ heroku login\n$ heroku create heroku-line-bot\n$ heroku config:set LINE_CHANNEL_SECRET=\"<Channel Secret>\"\n$ heroku config:set LINE_CHANNEL_ACCESS_TOKEN=\"<アクセストークン>\"\n$ git push heroku master\n```\n\n---\n\n### references\n\n- [LINE Messaging API SDK for Python - GitHub](https://github.com/line/line-bot-sdk-python)\n- [Python で Line bot を作ってみた - Qiita](https://qiita.com/kro/items/67f7510b36945eb9689b)\n- [Messaging API SDK - LINE Developers](https://developers.line.biz/ja/docs/messaging-api/line-bot-sdk/)\n- [Heroku でサンプルボットを作成する - LINE Developers](https://developers.line.biz/ja/docs/messaging-api/building-sample-bot-with-heroku/)\n- [heroku に Flask アプリをデプロイする - Qiita](https://qiita.com/msrks/items/c57e0168fb89f160d488)\n","data":{"title":"Wikipediaから検索するLINE botを作った","description":"`flask`, `line-bot-sdk` と `wikipedia`で作って，`heroku`にデプロイします。","slug":"line-wikipedia","date":"2019-05-04T00:26:20.000Z","category":"Tech Blog","tags":["Python","チャットボット"],"keyVisual":"https://repository-images.githubusercontent.com/184452650/ee9d3b80-6cab-11e9-9261-01e61f18fa3c"}},"__N_SSG":true}