{"pageProps":{"content":"\n誰でも osc を通して作品に参加できるような web アプリケーションをプロトタイピングしました。[リポジトリ](\"https://github.com/atsukoba/osc-webapp\")。\n\n## OSC (Open Sound Control)\n\nOSC とは: [opensoundcontrol.org](http://opensoundcontrol.org/) や[wikipedia](https://ja.wikipedia.org/wiki/OpenSound_Control)を参照。\n\nyoppa.org の[openFramewoks – OSC (Open Sound Control) を利用したネットワーク連携](https://yoppa.org/ma2_10/2279.html)が非常にためになる。\n\nUDP 上で MIDI みたいなものを Max/MSP に送ったりできるので非常に便利。今回はこいつを LAN 上だけならずインターネット上のスマートフォンからローカルに受け付ける，展示をよりインタラクティブにするためのツールのプロトタイピングを行う。\n\n(以下リポジトリを参照していただければローカルでアプリケーション動かせます）\n\n<blockquote class=\"embedly-card\"><h4><a href=\"https://github.com/atsukoba/osc-webapp\">atsukoba/osc-webapp</a></h4><p>Serve OSC from www. Contribute to atsukoba/osc-webapp development by creating an account on GitHub.</p></blockquote>\n<script async src=\"//cdn.embedly.com/widgets/platform.js\" charset=\"UTF-8\"></script>\n\n## 概観\n\nnodejs/express でサーバを立てて，軽くて双方向に使える websocket でユーザのアプリケーション上での動きを捉える。localhost に立てたサーバを ngrok で公開し，その URL(とローカルの IP アドレス)を QR コードに出力するところまでを実装する。\n\n軽くフロントを書いてデモをつくり，簡単なボタンとそのボタンに対応したメッセージをローカルの osc に送れるかを確認する。\n\n![alt](/images/works/osc-webapp.png 'デモのスクリーンショット')\n\n### express\n\n```shell\nnpm install express-generator -g\nexpress --view=ejs osc-webapp\ncd osc-webapp\nnpm install\n```\n\n`socket.io`を使用する。\n\n```javascript\nconst app = express()\nconst http = require('http').Server(app)\nconst io = require('socket.io')(http)\n```\n\n### osc\n\n`node-osc`([npm: node-osc](https://www.npmjs.com/package/node-osc))を利用する。利用例としては以下のような感じ\n\n```javascript\nconst osc_portnum = 5050\nconst client = new osc.Client('127.0.0.1', osc_portnum)\n\nio.of('osc').on('connection', (socket) => {\n  socket.on('message', (obj) => {\n    console.log('osc: ' + obj)\n    obj = JSON.parse(obj)\n    let sendObj = new osc.Message(obj.address)\n    sendObj.append(obj.args)\n    client.send(sendObj)\n    let dt = new Date()\n    io.of('osc').send(\n      `${dt.toFormat('HH24:MI:SS')} : osc message received: ${obj.args}`,\n    )\n  })\n})\n```\n\n### qrcode\n\n`os`, `qrcode`([npm: qrcode](https://www.npmjs.com/package/qrcode)) を用いて，ローカル IP アドレスと`ngrok`([npm: ngrok](https://www.npmjs.com/package/ngrok))で生成した URL を QR にする。\n\n```javascript\nconst ngrok = require('ngrok')\nconst qrcode = require('qrcode')\n\n// get local ip addresses\nlet interfaces = os.networkInterfaces()\nlet addresses = []\nfor (let k in interfaces) {\n  for (let k2 in interfaces[k]) {\n    let address = interfaces[k][k2]\n    if (address.family === 'IPv4' && !address.internal) {\n      addresses.push(address.address)\n    }\n  }\n}\nconsole.log(`local ip addresses: ${addresses}`)\nconsole.log(`FOR LOCAL NEWORK PARTICIPANTS`)\nqrcode.toString(\n  `http://${addresses[0]}:${portnum}`,\n  { type: 'terminal' },\n  (err, str) => {\n    console.log(str)\n  },\n)\n\n// make ngrok tunnel\nconsole.log(`FOR WWW PARTICIPANTS`)\n;(async () => {\n  let url = await ngrok.connect(portnum)\n  console.log('ngrok URL: ' + url)\n  qrcode.toString(url, { type: 'terminal' }, (err, str) => {\n    console.log(str)\n  })\n})()\n```\n\n### つかう\n\n```shell\nnpm start\n```\n\nこれで QR コードが生成されるので，それをシェアすれば osc を送れる。同一 LAN にいるなら，上部の QR コードでおｋ。config ファイルでポート番号を指定し，デモはクライアント側の main.js で(今は)送る osc メッセージをハードコードしているので，適宜それを編集して使っていただければと思う。\n\n![gif](https://i.gyazo.com/3872867c437f9bb2db573f1f3f2b69d1.gif)\n\n### reference\n\n- [Qiita: node.js と Processing を OSC でやりとり](https://qiita.com/tkyko13/items/d219a509d8367e272055)\n- [yoppa.org: Processing Libraries 3 : oscP5 – OSC によるアプリケーション間通信](https://yoppa.org/sfc_design16/7927.html)\n","data":{"title":"nodejsでローカルにoscを送るwebアプリケーションを作る (SocketIO, Express)","description":"誰でもoscを通して作品に参加できるようなwebアプリケーションをプロトタイピングしました。","slug":"osc-webapp","date":"2019-10-08T17:50:42.000Z","category":"Tech Blog","tags":["Open Sound Control","nodejs","express"],"keyVisual":"https://i.gyazo.com/0ec1a0958d7e3a96e45e0503ca9497ad.png"}},"__N_SSG":true}