{"pageProps":{"content":"\n### パッケージマネージャ\n\n[Firebase を iOS プロジェクトに追加する - Google](https://firebase.google.com/docs/ios/setup?hl=ja)を参照すると，現状ではXcode 12.0 以降，CocoaPods 1.9.0 以降が推奨されているので，`Swift Packaging Manager`ではなく`Cocoapods`を使う．\n\n### Property Listの扱い\n\nFirebaseのconsoleでのApp追加時に取得する`plist`を環境毎に分けたい場合．それぞれFirebaseのプロジェクト毎にリネームし，iOSプロジェクト内に配置．\n\n```swift\n// AppDelegate.swift\n\n// MARK: - Firebase init\nlet configFileName: String\n#if DEBUG\nconfigFileName = \"GoogleService-dev-Info\"\n#else\nconfigFileName = \"GoogleService-prod-Info\"\n#endif\nguard let filePath = Bundle.main.path(forResource: configFileName, ofType: \"plist\"),\n    let options = FirebaseOptions(contentsOfFile: filePath) else {\n    fatalError(\"Firebase plist file is not found.\")\n}\nFirebaseApp.configure(options: options)\n```\n\n### Crashlystics導入\n\nBuild PhaseでビルドしたApp内に`plist`を配置する必要がある．\n\n[Get started with Firebase Crashlytics - Google](https://firebase.google.com/docs/crashlytics/get-started)\n\nビルド時の最後に走らせる必要があるので，`Podfile`に定義する．\n\n```Ruby\n# Podfile\n\ntarget 'PROJECT_NAME' do\n  # Comment the next line if you don't want to use dynamic frameworks\n  use_frameworks!\n  \n  pod 'Firebase/Crashlytics'\n  script_phase :name=> 'FirebaseCrashlytics',\n                 :script=> '\"${PODS_ROOT}/FirebaseCrashlytics/run\"',\n                 :input_files=> ['$(SRCROOT)/$(BUILT_PRODUCTS_DIR)/$(INFOPLIST_PATH)']\n```\n\nそしてその前に各環境毎の`plist`をApp内の指定したパスにコピーしておく．ｌｐれはXCodeのCodegen上にスクリプトを足しておく．\n\n```shell\n# Type a script or drag a script file from your workspace to insert its path.\n\n# Crashlytics用にGoogleService-Info.plistをビルドディレクトリにコピーする必要があるた\nPATH_TO_GOOGLE_PLISTS=\"${PROJECT_DIR}/bengoshi-ios/Firebase\"\n\ncase \"${CONFIGURATION}\" in\n\"Debug\" )\ncp -r \"$PATH_TO_GOOGLE_PLISTS/GoogleService-dev-Info.plist\" \"${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app/GoogleService-Info.plist\" ;;\n\n\"Release\" )\ncp -r \"$PATH_TO_GOOGLE_PLISTS/GoogleService-prod-Info.plist\" \"${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app/GoogleService-Info.plist\" ;;\n\n*)\n;;\nesac\n```\n\nFirebase App Distributionの場合はアーカイブ時に `Rebuild from Bitcode`をオフにする．これによりdSYMが同梱されるためアップロードの必要がなくなるらしい．\nApp Store Connectにアップロードする際は，\n\n## Firebase Analytics\n\n以下のように各種イベントの種類等定義しておく\n\n```swift\nimport Foundation\nimport Firebase\nimport FirebaseAnalytics\n\nclass EventLogs {\n    // MARK: - LogIn\n    static func loginInputTelNumber(success: Bool, error_type: String? = nil) {\n        if success {\n            Analytics.logEvent(\"ios_login_input_tel_number_succeed\",\n                               parameters: nil)\n        } else {\n            Analytics.logEvent(\"ios_login_input_tel_number_failure\",\n                               parameters: [\"error_type\": error_type as Any])\n        }\n    }\n    static func login(success: Bool, error_type: String? = nil) {\n        if success {\n            Analytics.logEvent(\"login\", parameters: [\"method\": \"iOS\"])\n            Analytics.logEvent(\"ios_login_succeed\", parameters: nil)\n        } else {\n            Analytics.logEvent(\"ios_login_failure\",\n                               parameters: [\"error_type\": error_type as Any])\n        }\n    }\n    static func logout() {\n        Analytics.logEvent(\"ios_logout\", parameters: nil)\n    }\n    // MARK: - UI\n    static func openModal() {\n        Analytics.logEvent(\"ios_ui_modal_open\", parameters: nil)\n    }\n    static func closeModal() {\n        Analytics.logEvent(\"ios_ui_modal_close\", parameters: nil)\n    }\n: \n:\n```\n\nただ，Firabse AnaltyicsのEventは反映されるのに時間がかかるので，DebugView 機能を用いる．Xcodeで、`Product -> Scheme -> Edit scheme`のArgumentsタブで `-FIRDebugEnabled`を引数に設定する．すると，数十秒のラグでデバッグしながらイベントを確認できる．\n\n### 参考\n\n<https://www.apps-gcp.com/introduction-of-firebase-analytics/#i-5>\n","data":{"title":"iOSプロジェクトへのFirebase導入で詰まったことメモ","description":"iOSプロジェクトへのFirebase導入で詰まったことのメモを残します．","slug":"ios-firebase","date":"2020-11-30T00:26:20.000Z","category":"Tech Blog","tags":["iOS","Firebase"],"keyVisual":"https://i.gyazo.com/be840f19639279330deb61f636e14685.png"}},"__N_SSG":true}