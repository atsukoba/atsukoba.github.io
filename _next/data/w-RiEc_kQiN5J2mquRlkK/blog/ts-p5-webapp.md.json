{"pageProps":{"content":"\nWeb Audio APIのラッパーであるrecorder.jsを用いて簡易レコーダーを作成します。ブラウザ版Processingであるp5.jsをtsで書いてUI実装します。\n\n<!-- more -->\n\n> *フィールドレコーディング：スタジオ外での自然音や環境音の録音*\n> 自然音や環境音を手軽に集めたい，そしてそれをPCへ送りリアルタイムに処理したい，といったニッチな要望に応えるものを作った感じです\n\n## 完成イメージ\n\nイメージといってもスクリーンショットなんでこういう感じで動きます。\n\n![animation screenshot](https://i.gyazo.com/6825cb4c65c8d1c4e7f8f7a3a6a357d4.gif)\n\n(たぶん)ササっと環境構築して動かせるので興味ある方は是非。\n\n## recorderjsでフロント側で音声録音する\n\nGitHub: <https://github.com/mattdiamond/Recorderjs>\n\nまずデモはこちら[Simple Recorder.js demo](https://addpipe.com/simple-recorderjs-demo/)\n\nWeb Audio APIのラッパーみたいな感じでしょうか。AudioNodeのインスタンスを渡せば簡単に録音スタート・ストップ・保存ができる，という優れモノ。\n\n以下のような感じで録音開始の関数定義ができるので，任意のイベントで呼べば良い。\n\n```typescript\nlet recorder : Recorder\n\nconst startUserMedia = (stream : MediaStream) => {\n  audio_context = new AudioContext\n  let input : AudioNode = audio_context.createMediaStreamSource(stream)\n  recorder = new Recorder(input)\n}\n\nconst startRecording = () => {\n  recorder && recorder.record()\n}\n```\n\nで，この`Recorder.exportWAV()`メソッド一発でwavのBlobオブジェクトが手に入るので，ソレをajaxでPOSTしてあげれば良い。\n\n```typescript\nrecorder && recorder.exportWAV((blob : Blob) => {\n  let url = URL.createObjectURL(blob)\n  let fd = new FormData()\n  fd.append('data', blob)\n  $.ajax({\n    type: 'POST',\n    url: '/',\n    data: fd\n  }).done((data) => {\n    recorder.clear()\n    }\n  )\n})\n```\n\n## flaskでPOSTされたwavファイルを保存する\n\nflask側ではこんな感じに書けば良い。\n\n```python\nfrom flask import Flask, jsonify, request\n\n\n@app.route('/', methods=['POST'])\ndef uploaded_wav():\n    fname = \"sounds/\" + datetime.now().strftime('%m%d%H%M%S') + \".wav\"\n    with open(f\"{fname}\", \"wb\") as f:\n        f.write(request.files['data'].read())\n    print(f\"posted sound file: {fname}\")\n    return jsonify({\"data\": fname})\n```\n\nこれで`sounds/`直下に`1104235900.wav`みたいなファイルがどんどん溜まっていく。\n\n## 保存されたファイルのパスをoscで送る\n\n個人的にこのアプリケーションをパフォーマンスで使用したいので，サウンドファイルが保存されたタイミングでoscにメッセージを飛ばしてみる。コレで例えばサーバとなっているローカルのPCでMax/MSPやMax for Liveを用いたリアルタイムでのサウンドファイル読み込みがラクになる（と信じている）\n\n`pythonosc`というパッケージを用いる。(`pip install python-osc`で入る)\n\npython-osc PyPI: <https://pypi.org/project/python-osc/>\n\n```python\nfrom pythonosc import dispatcher, osc_message_builder, osc_server, udp_client\n\n\naddress = \"127.0.0.1\"\nport = 5050\nclient = udp_client.UDPClient(address, port)\n\n\ndef send_osc(msg):\n    msg_obj = osc_message_builder.OscMessageBuilder(address=address)\n    msg_obj.add_arg(msg)\n    client.send(msg_obj.build())\n```\n\nこれで良い。あとは上述の`uploaded_wav()`内で`send_osc(fname)`してあげれば，ファイルパスがメッセージとして届く。Maxなら`[udpreceive 5050]`しておけばopen&sfplay~して再生できる。\n\n## p5.js\n\np5js.org: <https://p5js.org/>\n\nDOMがいじれるProcessingという感じで，Canvas要素に描画するのでCSSで複雑なアニメーションを描いているとかしなくても，canvasが動くブラウザなら良いしこっちのがラクかもしれないです。また，Web Editor(<https://editor.p5js.org/>) というものがあり，環境構築ナシで挙動が試せるので非常にとっかりやすいと思います。\n\nTypeScriptを導入するなら，まず以下のリポジトリを使うべきです（めっちゃラクだった）\n\n<blockquote class=\"embedly-card\"><h4><a href=\"https://github.com/Gaweph/p5-typescript-starter\">Gaweph/p5-typescript-starter</a></h4><p>Base starter project using p5js and typescript: Contribute to Gaweph/p5-typescript-starter development by creating an account on GitHub.</p></blockquote>\n\nかつ，以下のエントリを参考にしました\n\n- [TypeScript+webpackでProcessing(p5.js)の環境を構築する - Qiita](https://qiita.com/uchiko/items/744d7559d37973a959ea)\n- [CreativeCoding用にP5.jsがTypeScriptで書ける環境をつくった。 - Qiita](https://qiita.com/y___k/items/429e7095ef638a515b07)\n\nあとは，ササっと書いていくだけです。例としてUIの録音ボタンの部分のクラスをおいておきます…\n\n```typescript\nclass Button {\n\n  private w: number\n  private h: number\n  private centerX: number\n  private centerY: number\n  private radius: number\n  private isRecording: boolean\n  private rectCircleRatio : number\n  private progress : number // 0 ~ 300 value (about 5s)\n\n  constructor(w: number, h: number, size: number) {\n    this.w = w\n    this.h = h\n    this.centerX = w / 2\n    this.centerY = h / 2\n    this.radius = size\n    this.isRecording = false\n    this.rectCircleRatio = size / 2\n    this.progress = 0\n  }\n\n  isTouched(x: number, y: number) {\n    if (((x - this.centerX) ** 2 + (y - this.centerY) ** 2) < this.radius ** 2) {\n      return true\n    }\n    return false\n  }\n\n  switchRecording() {\n    this.isRecording = !this.isRecording\n    console.log(`switched to recording: ${this.isRecording}`)\n    if (this.isRecording) {\n      startRecording()\n    } else {\n      this.progress = 0\n      stopRecording()\n    }\n  }\n\n  draw() {\n    if (this.progress == 300) {\n      this.progress = 0\n      this.switchRecording()\n    }\n    if (this.isRecording) {\n      if (this.rectCircleRatio > 5) {\n        clear();\n        this.rectCircleRatio -= 5;\n      }\n      this.progress ++\n    } else {\n      if (this.rectCircleRatio <= this.radius / 2) {\n        clear();\n        this.rectCircleRatio += 5;\n      }\n    }\n    drawCircleUI(this.progress * 2 * PI / 300)\n    noStroke();\n    fill(mainColor);\n    rect(\n      this.centerX - this.radius / 2,\n      this.centerY - this.radius / 2,\n      this.radius, this.radius, \n      this.rectCircleRatio\n    );\n    // text\n    fill(white)\n    textAlign(CENTER, CENTER);\n    textSize(16);\n    if (this.isRecording) {\n      text('STOP', \n      this.centerX,\n      this.centerY);\n    }else {\n      text('REC', \n      this.centerX,\n      this.centerY);\n    }\n  }\n}\n```\n\n## リポジトリ\n\n<blockquote class=\"embedly-card\" data-card-controls=\"0\"><h4><a href=\"https://github.com/atsukoba/AudioSampleRecorder\">atsukoba/AudioSampleRecorder</a></h4><p>Audio recording on the Web using Web Audio API for remote real-time environmental sound collection. python3 and packages listed in requirements.txt nodejs and packages listed in package.json tmux ngrok recorder-js git clone -r https://github.com/atsukoba/AudioSampleRecorder.git npm install sh ngrok-install.sh then put your ngrok auth-token if using pip and HomeBrew, run this prepared script.</p></blockquote>\n<script async src=\"//cdn.embedly.com/widgets/platform.js\" charset=\"UTF-8\"></script>\n\n実際に活用できるので気が向いたらどうぞ。[osc-webapp]()と同じく，ngrokでhttpsトンネルほって公開してます。(httpsじゃないとWeb Audio APIが使えない)\n","data":{"description":"","title":"ブラウザ上で録音できるツールをflask + recorder.js + p5.js on TypeScript で作る","slug":"ts-p5-webapp","date":"2019-11-04T01:27:35.000Z","category":"Tech Blog","tags":["p5.js","Recorder.js","Web Audio API","TypeScript"]}},"__N_SSG":true}